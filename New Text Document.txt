<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Collapsible Calendar</title>
    <style>
        .usercontrol {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
        }
        
        @media (max-width: 768px) {
            .usercontrol {
                flex-direction: column;
                align-items: center;
                gap: 1rem;
            }
            .usercontrol > div {
                width: 100%;
                display: flex;
                justify-content: center;
            }
            .calendar-container {
                width: 90%;
                max-width: 400px;
            }
        }

        .calendar-container {
            border: 1px solid #ddd;
            width: 20rem;
            border-radius: 8px;
            background: rgba(0, 0, 0, 0.6);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            position: relative;
            overflow: hidden;
            transition: height 0.3s ease;
        }

        .calendar-toggle {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 16px;
            cursor: pointer;
            background: rgba(0, 0, 0, 0.8);
            border-bottom: 1px solid #444;
            user-select: none;
        }

        .calendar-toggle:hover {
            background: rgba(0, 0, 0, 0.9);
        }

        .toggle-text {
            color: white;
            font-size: 16px;
            font-weight: 500;
        }

        .dropdown-arrow {
            color: white;
            font-size: 18px;
            transition: transform 0.3s ease;
        }

        .calendar-container.expanded .dropdown-arrow {
            transform: rotate(180deg);
        }

        .calendar-content {
            padding: 16px;
            transition: all 0.3s ease;
            max-height: 500px;
            opacity: 1;
        }

        /* Key fix: Hide content completely when collapsed */
        .calendar-container.collapsed .calendar-content {
            max-height: 0;
            padding: 0 16px;
            opacity: 0;
            overflow: hidden;
        }

        .calendar-container.collapsed {
            border-bottom: none;
        }

        .calendar-container.collapsed .calendar-toggle {
            border-bottom: none;
        }

        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 16px;
        }

        .nav-button {
            background: red;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 8px 12px;
            cursor: pointer;
            font-size: 14px;
            transition: background 0.2s;
        }

        .nav-button:hover {
            background: #357abd;
        }

        .nav-button:active {
            background: #2a5d8f;
        }

        .year-month {
            font-size: 18px;
            font-weight: bold;
            color: white;
        }

        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 2px;
        }

        .day-header {
            text-align: center;
            font-weight: bold;
            font-size: 12px;
            color: #666;
            padding: 8px 0;
            background: #f5f5f5;
        }

        .day-cell {
            aspect-ratio: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 1px solid #eee;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.2s;
            color: black;
            background: white;
        }

        .day-cell:hover {
            background: #e3f2fd;
        }

        .day-cell.other-month {
            color: #ccc;
            background: #f9f9f9;
        }

        .day-cell.selected {
            background: #4a90e2;
            color: white;
            font-weight: bold;
        }

        .day-cell.today {
            background: #fff3cd;
            font-weight: bold;
        }

        .selected-date {
            margin-top: 12px;
            padding: 8px;
            background: #f8f9fa;
            border-radius: 4px;
            font-size: 14px;
            text-align: center;
            color: #666;
        }

        .close-button {
            position: absolute;
            bottom: 10px;
            right: 10px;
            background: #4a90e2;
            color: white;
            border: none;
            border-radius: 50%;
            width: 32px;
            height: 32px;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
            box-shadow: 0 2px 6px rgba(0,0,0,0.3);
            transition: all 0.2s;
            z-index: 10;
        }

        .close-button:hover {
            background: #357abd;
            transform: scale(1.1);
        }

        .close-button:active {
            background: #2a5d8f;
            transform: scale(0.95);
        }
    </style>
</head>
<body>
    <section class="usercontrol">
        <div>
            <!-- Left item goes here -->
        </div>
        <div>
            <div class="calendar-container collapsed" id="calendar">
                <div class="calendar-toggle" id="calendarToggle">
                    <span class="toggle-text">Please select your Event date</span>
                    <span class="dropdown-arrow">▼</span>
                </div>
                <div class="calendar-content">
                    <div class="calendar-header">
                        <button class="nav-button" id="prevMonth">←</button>
                        <div class="year-month" id="yearMonth"></div>
                        <button class="nav-button" id="nextMonth">→</button>
                    </div>
                    <div class="calendar-grid">
                        <div class="day-header">Sun</div>
                        <div class="day-header">Mon</div>
                        <div class="day-header">Tue</div>
                        <div class="day-header">Wed</div>
                        <div class="day-header">Thu</div>
                        <div class="day-header">Fri</div>
                        <div class="day-header">Sat</div>
                        <!-- Days will be generated by JavaScript -->
                    </div>
                    <div class="selected-date" id="selectedDate">No Event date selected</div>
                    <button class="close-button" id="closeButton">×</button>
                </div>
            </div>
        </div>
    </section>

    <script>
        class Calendar {
            constructor() {
                this.currentDate = new Date();
                this.selectedDate = null;
                this.calendarEl = document.getElementById('calendar');
                this.toggleEl = document.getElementById('calendarToggle');
                this.closeButtonEl = document.getElementById('closeButton');
                
                this.init();
            }

            init() {
                this.render();
                this.attachEventListeners();
            }

            attachEventListeners() {
                // Toggle calendar visibility
                this.toggleEl.addEventListener('click', () => this.toggleCalendar());
                this.closeButtonEl.addEventListener('click', () => this.collapseCalendar());
                
                // Navigation buttons
                document.getElementById('prevMonth').addEventListener('click', () => this.previousMonth());
                document.getElementById('nextMonth').addEventListener('click', () => this.nextMonth());
            }

            toggleCalendar() {
                if (this.calendarEl.classList.contains('collapsed')) {
                    this.expandCalendar();
                } else {
                    this.collapseCalendar();
                }
            }

            expandCalendar() {
                this.calendarEl.classList.remove('collapsed');
                this.calendarEl.classList.add('expanded');
            }

            collapseCalendar() {
                this.calendarEl.classList.remove('expanded');
                this.calendarEl.classList.add('collapsed');
            }

            previousMonth() {
                this.currentDate.setMonth(this.currentDate.getMonth() - 1);
                this.render();
            }

            nextMonth() {
                this.currentDate.setMonth(this.currentDate.getMonth() + 1);
                this.render();
            }

            render() {
                this.renderHeader();
                this.renderDays();
            }

            renderHeader() {
                const monthNames = [
                    'January', 'February', 'March', 'April', 'May', 'June',
                    'July', 'August', 'September', 'October', 'November', 'December'
                ];
                
                document.getElementById('yearMonth').textContent = 
                    `${monthNames[this.currentDate.getMonth()]} ${this.currentDate.getFullYear()}`;
            }

            renderDays() {
                const grid = document.querySelector('.calendar-grid');
                
                // Remove existing day cells
                const existingDays = grid.querySelectorAll('.day-cell');
                existingDays.forEach(day => day.remove());

                const year = this.currentDate.getFullYear();
                const month = this.currentDate.getMonth();
                
                // First day of the month
                const firstDay = new Date(year, month, 1);
                const startingDayOfWeek = firstDay.getDay();
                
                // Last day of the month
                const lastDay = new Date(year, month + 1, 0);
                const daysInMonth = lastDay.getDate();
                
                // Previous month's trailing days
                const prevMonth = new Date(year, month, 0);
                const daysInPrevMonth = prevMonth.getDate();
                
                const today = new Date();
                const isCurrentMonth = today.getFullYear() === year && today.getMonth() === month;
                const todayDate = today.getDate();

                // Add previous month's trailing days
                for (let i = startingDayOfWeek - 1; i >= 0; i--) {
                    const dayNum = daysInPrevMonth - i;
                    const dayEl = this.createDayElement(dayNum, true);
                    grid.appendChild(dayEl);
                }

                // Add current month's days
                for (let day = 1; day <= daysInMonth; day++) {
                    const dayEl = this.createDayElement(day, false);
                    
                    // Highlight today
                    if (isCurrentMonth && day === todayDate) {
                        dayEl.classList.add('today');
                    }
                    
                    // Highlight selected date
                    if (this.selectedDate && 
                        this.selectedDate.getFullYear() === year &&
                        this.selectedDate.getMonth() === month &&
                        this.selectedDate.getDate() === day) {
                        dayEl.classList.add('selected');
                    }
                    
                    grid.appendChild(dayEl);
                }

                // Add next month's leading days
                const totalCells = grid.children.length - 7; // Subtract headers
                const remainingCells = 42 - totalCells; // 6 rows × 7 days
                
                for (let day = 1; day <= remainingCells; day++) {
                    const dayEl = this.createDayElement(day, true);
                    grid.appendChild(dayEl);
                }
            }

            createDayElement(day, isOtherMonth) {
                const dayEl = document.createElement('div');
                dayEl.className = 'day-cell';
                dayEl.textContent = day;
                
                if (isOtherMonth) {
                    dayEl.classList.add('other-month');
                }
                
                if (!isOtherMonth) {
                    dayEl.addEventListener('click', () => this.selectDate(day));
                }
                
                return dayEl;
            }

            selectDate(day) {
                this.selectedDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), day);
                
                const options = { 
                    weekday: 'long', 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                };
                
                document.getElementById('selectedDate').textContent = 
                    `Selected: ${this.selectedDate.toLocaleDateString('en-US', options)}`;
                
                // Update the toggle text
                document.querySelector('.toggle-text').textContent = 
                    `Event date: ${this.selectedDate.toLocaleDateString('en-US')}`;
                
                this.render(); // Re-render to show selection
                
                // Auto-collapse after selection
                setTimeout(() => this.collapseCalendar(), 500);
            }
        }

        // Initialize calendar when page loads
        document.addEventListener('DOMContentLoaded', () => {
            new Calendar();
        });
    </script>
</body>
</html>